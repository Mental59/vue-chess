# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import matchmaker_pb2 as matchmaker__pb2


class MatchmakerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGameList = channel.stream_stream(
                '/matchmaker.Matchmaker/GetGameList',
                request_serializer=matchmaker__pb2.User.SerializeToString,
                response_deserializer=matchmaker__pb2.Game.FromString,
                )
        self.CreateGame = channel.unary_unary(
                '/matchmaker.Matchmaker/CreateGame',
                request_serializer=matchmaker__pb2.User.SerializeToString,
                response_deserializer=matchmaker__pb2.Game.FromString,
                )
        self.CloseGame = channel.unary_unary(
                '/matchmaker.Matchmaker/CloseGame',
                request_serializer=matchmaker__pb2.Game.SerializeToString,
                response_deserializer=matchmaker__pb2.Status.FromString,
                )
        self.JoinPlayer = channel.unary_unary(
                '/matchmaker.Matchmaker/JoinPlayer',
                request_serializer=matchmaker__pb2.JoinRequest.SerializeToString,
                response_deserializer=matchmaker__pb2.Game.FromString,
                )
        self.JoinVisitor = channel.unary_unary(
                '/matchmaker.Matchmaker/JoinVisitor',
                request_serializer=matchmaker__pb2.JoinRequest.SerializeToString,
                response_deserializer=matchmaker__pb2.Game.FromString,
                )


class MatchmakerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetGameList(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinPlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinVisitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MatchmakerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGameList': grpc.stream_stream_rpc_method_handler(
                    servicer.GetGameList,
                    request_deserializer=matchmaker__pb2.User.FromString,
                    response_serializer=matchmaker__pb2.Game.SerializeToString,
            ),
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=matchmaker__pb2.User.FromString,
                    response_serializer=matchmaker__pb2.Game.SerializeToString,
            ),
            'CloseGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseGame,
                    request_deserializer=matchmaker__pb2.Game.FromString,
                    response_serializer=matchmaker__pb2.Status.SerializeToString,
            ),
            'JoinPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinPlayer,
                    request_deserializer=matchmaker__pb2.JoinRequest.FromString,
                    response_serializer=matchmaker__pb2.Game.SerializeToString,
            ),
            'JoinVisitor': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinVisitor,
                    request_deserializer=matchmaker__pb2.JoinRequest.FromString,
                    response_serializer=matchmaker__pb2.Game.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'matchmaker.Matchmaker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Matchmaker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetGameList(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/matchmaker.Matchmaker/GetGameList',
            matchmaker__pb2.User.SerializeToString,
            matchmaker__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchmaker.Matchmaker/CreateGame',
            matchmaker__pb2.User.SerializeToString,
            matchmaker__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchmaker.Matchmaker/CloseGame',
            matchmaker__pb2.Game.SerializeToString,
            matchmaker__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchmaker.Matchmaker/JoinPlayer',
            matchmaker__pb2.JoinRequest.SerializeToString,
            matchmaker__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinVisitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/matchmaker.Matchmaker/JoinVisitor',
            matchmaker__pb2.JoinRequest.SerializeToString,
            matchmaker__pb2.Game.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
